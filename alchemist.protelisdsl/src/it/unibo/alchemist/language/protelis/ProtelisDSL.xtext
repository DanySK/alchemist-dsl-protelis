grammar it.unibo.alchemist.language.protelis.ProtelisDSL with it.unibo.alchemist.language.protelis.Protelis

generate protelisDSL "http://alchemist.apice.unibo.it/ProtelisDSL"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://alchemist.apice.unibo.it/Protelis" as fieldcalculus

Environment :
	(constants+=ConstantDeclaration)*
	(('environment' (name=ID)? ('type' type=JavaConstructor)) | 'default environment')
	linkingRule=LinkingRule
	(position=Position)?
	('generate scenario number ' internalRNGSeed=SINT)?
	(random=RandomEngine)?
	(time=Time)?
	(layers+=Layer)*
	programs+=Prog+
	(constrains+=Constrain)*
	elements+=NodeGroup+
	 ;
	 
Position:
 	'with position type' type=QualifiedName;
	 
Layer: 'layer' type=JavaConstructor;

Prog: ('protelis program' name=ID (
	program=Program
	| 'from' => programlink=[fieldcalculus::Program|ProtelisQualifiedName]
	)
	'@' (timeDistribution=JavaConstructor | rate=Number) (',' (timeDistributionSend=JavaConstructor | rateSend=Number))?|
	'reaction pool' name=ID reactions+=Reaction+
);

LinkingRule:
 	('with communication model' type=JavaConstructor) | 'linking nodes in range' range=Number;
 	
RandomEngine: 	
 	'with random' ('type' type=QualifiedName)? 'seed' seed=Seed ;
 	
Time: 	
 	'with time type' type=QualifiedName ;

NodeGroup:
	'place' ((gtype='single' 'node' ('named' name=ID)? ('of type' type=JavaConstructor)? 'at point' '('x=Number','y=Number')') |
	(numNodes=INT 'nodes' ('of type' type=JavaConstructor)? 'within' 
		(
			(gtype='rect' '('x=Number','y=Number','w=Number','h=Number')' ('interval' '('ix=Number','iy=Number')' ('tolerance' '('tx=Number','ty=Number')')?)?) |
			(gtype='circle' '('x=Number','y=Number','r=Number')'?) |
			(gtype='shape' shape=JavaConstructor)
		)
	))
	('containing' contents+=[Constrain]+)?
	('with program' reactions+=[Prog]+)? ;

Reaction :
	('reaction' name=ID)?
	(
		('reaction' type=JavaConstructor
			(
			('[' conditions+=Condition* ']' ('-' (timeDistribution=JavaConstructor | rate=Number) '->' | '-->') '[' actions+=Action* ']') |
			'empty'
			)
		) |
		(
		'[' conditions+=Condition+ ']' ('-' (timeDistribution=JavaConstructor | rate=Number) '->' | '-->') '[' actions+=Action* ']' |
		'['']' ('-' (timeDistribution=JavaConstructor | rate=Number) '->' | '-->') '[' actions+=Action+ ']'
    	)
    );

Condition :
    ('condition' type=JavaConstructor) (',')?;

Action :
    (('action'|'agent') type=JavaConstructor) (',')?;
    

Number :
	name=[ConstantDeclaration] | v=SDOUBLE
;
	
ConstantDeclaration:
	'val' name=ID '=' (v=SDOUBLE | vString = STRING)
;

Constrain :
 	'content' name=ID ':' 'in' (
 		ctype='all' |
 		ctype='point' '('x=Number','y=Number')' |
 		ctype='rect' '('x=Number','y=Number','w=Number','h=Number')'
 		)
 		contents+=Content+;	
 		
Content : 
	( name=ID '<-' (valNum=Number | valBool=BOOLEAN | valString=STRING));

Seed:('random' | SINT) ;

JavaConstructor: javaClass=QualifiedName '(' (javaArgList=ArgList)? ')';

QualifiedName: (AID '.')? AID;

ArgList: args += Arg (',' args += Arg)* ;
Arg: val=ArgTerm | var=Number;
ArgTerm: STRING | BOOLEAN;

terminal ML_COMMENT	: '/*' -> '*/';
SINT returns ecore::EInt: '-'? INT;
SDOUBLE returns ecore::EDouble: '-'? DOUBLE;
